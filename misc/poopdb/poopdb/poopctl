#!/usr/bin/env python2

# todo:
# - don't let user add crazy db/data names (unix file issues)
# - python2 env var issue, specify python 2.7 in readme
# - better checking for proper key/value
# - key/value cannot contain :

import os
import sys
import poopapi

cli         = True
db          = None
db_prompt   = ''
path        = '/opt/poopdb/'
help_text   = '''
show dbs        show databases
use foo         select a database, creates if doesn't exist
show datas      show data files in selected database
add foo.data    create a new data file
read foo.data   show contents of a data file
clear           clear screen
help            display help text
quit            exit cli
'''

# cli
def db_cmds(line):
    global db

    # poopdb# <cmd> <arg>
    cmd = line[0].lower()
    try:
        arg = line[1].lower()
    except:
        arg = None

    # generic commands
    if cmd == 'quit':
        sys.exit()
    elif cmd == 'clear':
        os.system('clear')
    elif cmd == 'help':
        print help_text

    # require arg past this point
    elif cmd == 'use':
        if defined(arg):
            pass
        else:
            print "What database do you want to use?" 
            return

        poopapi.db_create(arg)
        db = arg

    # need delete db in poopapi
    elif cmd == 'drop':
        if defined(arg):
            pass
        else:
            print "What database do you want to drop?"
            return

        if arg == db:
            print 'cannot drop a database while selected'
            return
        elif arg in poopapi.db_avail():
            if confirm(arg):
                os.system('rm -rf '+path+arg)
        else:
            print 'database not found'

    elif cmd == 'show' and arg == 'dbs':
        print '\n'.join(poopapi.db_avail())

    # require db past this point
    elif cmd == 'show' and arg == 'datas':
        print '\n'.join(poopapi.db_query(db))
    else:
        print "wut"       

# common commands
def defined(foo):
    try:
        if foo:
            return True
    except:
        return False

def confirm(arg):
    prompt = raw_input('This will remove all data from %s (y/n)? ' % arg).lower()
    if prompt[0] == 'y':
        return True
    return False


if __name__ == "__main__":
    while cli:
        if db: db_prompt = "({0})".format(db)
        STDIN = raw_input('poopdb{0}# '.format(db_prompt)).split()

        # allow NOOP, and prompt
        try: STDIN[0]
        except: continue

        db_cmds(STDIN)

