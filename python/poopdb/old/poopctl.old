#!/usr/bin/env python2

# todo:
# - don't let user add crazy db/data names (unix file issues)
# - python2 env var issue, specify python 2.7 in readme
# - key/value cannot contain :

import os
import sys

cli         = True
db          = None
db_prompt   = ''
path        = '/opt/poopdb/'
help_text   = '''
show dbs        show databases
use foo         select a database, creates if doesn't exist
show datas      show data files in selected database
add foo.data    create a new data file
read foo.data   show contents of a data file
clear           clear screen
help            display help text
quit            exit cli
'''

# cli
def db_cmds(line):
    global db

    # this is bad practice come back to this
    cmd = line[0].lower()
    try: arg = line[1].lower()
    except: arg = None

    # db doesn't have to be selected commands
    if cmd == 'quit': sys.exit(0)
    elif cmd == 'clear': os.system('clear')
    elif cmd == 'help': print help_text

    # db doesn't have to be selected
    elif cmd == 'use':
        if arg not in show_dbs():
            os.mkdir(path+arg)
        db = arg

    elif cmd == 'drop':
        if arg == db:
            print 'cannot drop a database while selected'
            return
        elif arg in show_dbs():
            if confirm(arg):
                os.system('rm -rf '+path+arg)
        else:
            print 'database not found'

    elif cmd == 'show' and arg == 'dbs':
        print '\n'.join(show_dbs())

    # db selected commands
    elif db:
        db_path = path+db+'/'

        if cmd == 'show' and arg == 'datas':
            print '\n'.join(show_datas(db))

        elif cmd == 'read':
            if is_data(arg):
                try:
                    with open(db_path+arg, 'r') as f:
                        print f.read()
                except:
                    print 'file not found'

#        elif cmd == 'add':
#            if is_data(arg):
#                if os.path.isfile(db_path+arg):
#                    print 'file already exists'
#                    return
#                else:
#                    with open(db_path+arg, 'w') as f:
#                        while True:
#                            data_line = raw_input(' -> ')
#                            if data_line == '':
#                                return
#                            try:
#                                f.write(check(data_line)+'\n')
#                            except:
#                                print 'invalid syntax'
#                                return

#        elif cmd == 'del':
#            if is_data(arg):
#                if os.path.isfile(db_path+arg):
#                    if confirm(arg):
#                        os.system('rm -rf '+db_path+arg)

# common commands
def show_dbs():
    return [d for d in os.listdir(path)
        if os.path.isdir(os.path.join(path, d))]

def show_datas(db):
    return [f for f in os.listdir(path+db)
        if os.path.isfile(os.path.join(path+db, f))]

def is_data(foo):
    if not foo.endswith('.data'):
        print 'file must be of extension .data'
        return False
    return True

#def check(data_line):
#    li = a, b = data_line.split(':')
#    for i in li:
#        i = i.strip()
#        if (len(i.split("'")) == 3 and i[0] == "'" and i[-1] == "'") \
#        or int(i) or float(i):
#            continue
#        else:
#            return False
#    return a.strip()+':'+b.strip()

def confirm(arg):
    prompt = raw_input('This will remove all data from %s (y/n)? ' % arg).lower()
    if prompt[0] == 'y':
        return True
    return False


if __name__ == "__main__":
    while cli:
        if db: db_prompt = "({})".format(db)
        line = raw_input('poopdb{}# '.format(db_prompt)).split()

        # allow NOOP, and prompt
        try:
            if line[0]:
                db_cmds(line)
        except:
            continue
